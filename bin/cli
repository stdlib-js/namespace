#!/usr/bin/env node

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var fs = require( 'fs' );
var path = require( 'path' );
var parseArgs = require( 'minimist' );
var notifier = require( 'update-notifier' );
var indexOf = require( '@stdlib/utils/index-of' );
var pkg = require( './../package.json' );
var opts = require( './opts.json' );
var main = require( './../lib' );


// FUNCTIONS //

/**
* Performs initialization tasks.
*
* @private
* @example
* init();
*/
function init() {
	var opts;

	// Check if newer versions exist for this package:
	opts = {
		'pkg': pkg
	};
	notifier( opts ).notify();

	// Set the process title to allow the process to be more easily identified:
	process.title = pkg.name;
	process.stdout.on( 'error', process.exit );
}

/**
* Prints usage information.
*
* @private
* @example
* help();
* // => '...'
*/
function help() {
	var fpath = path.join( __dirname, 'usage.txt' );
	fs.createReadStream( fpath )
		.pipe( process.stderr )
		.on( 'close', onClose );

	function onClose() {
		process.exit( 0 );
	}
}

/**
* Prints the package version.
*
* @private
* @example
* version();
* // => '#.#.#'
*/
function version() {
	var msg = pkg.version.toString()+'\n';
	process.stdout.write( msg, 'utf8' );
	process.exit( 0 );
}

/**
* Prints data as newline-delimited JSON (ndjson).
*
* @private
* @param {ObjectArray} data - data to print
*/
function ndjson( data ) {
	var i;

	for ( i = 0; i < data.length; i++ ) {
		console.log( JSON.stringify( data[i] ) );
	}
}

/**
* Prints data as lines of comma-separated values (CSV).
*
* @private
* @param {ObjectArray} data - data to print
* @param {StringArray} fields - output fields
*/
function csv( data, fields ) {
	var line;
	var f;
	var i;
	var j;
	var n;
	var m;

	n = fields.length;
	m = n - 1;
	line = '';
	for ( j = 0; j < n; j++ ) {
		line += '"' + fields[ j ] + '"';
		if ( j < m ) {
			line += ',';
		}
	}
	console.log( line );
	for ( i = 0; i < data.length; i++ ) {
		line = '';
		for ( j = 0; j < n; j++ ) {
			f = fields[ j ];
			line += '"' + data[ i ][ f ] + '"';
			if ( j < m ) {
				line += ',';
			}
		}
		console.log( line );
	}
}


// VARIABLES //

var FIELDS = [ 'alias', 'path', 'type', 'related' ];
var fields;
var args;
var i;


// MAIN //

init();

// Parse command-line arguments:
args = parseArgs( process.argv.slice( 2 ), opts );

if ( args.help ) {
	return help();
}
if ( args.version ) {
	return version();
}
if ( args.fields ) {
	fields = args.fields.split( ',' );
	for ( i = 0; i < fields.length; i++ ) {
		if ( indexOf( FIELDS, fields[ i ] ) === -1 ) {
			throw new Error( 'invalid option. Unrecognized/unsupported field. Option: `' + fields[ i ] + '`.' );
		}
	}
	return csv( main(), fields );
}
ndjson( main() );
